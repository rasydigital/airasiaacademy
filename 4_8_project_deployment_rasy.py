# -*- coding: utf-8 -*-
"""4.8 Project Deployment_Rasy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U3GmMS2SFF1u7kg2ydGP15AlpRamQBOS

#4.8 Project Deployment - Web Application for Data Analytics

## About the instructor:

**Ts. Dr. Nur Shakirah Md Salleh**

Lead Technical Trainer - Data, Analytic and Machine Learning

airasia academy

nurshakirahmdsalleh@airasiaacademy.com

LinkedIn: [Ts. Dr. Nur Shakirah Md Salleh](https://www.linkedin.com/in/nurshakirahmdsalleh)

Â©2024 [airasia academy](https://airasiaacademy.com) All rights reserved.

##Learning Objectives
* To deploy a data/ML project to the cloud

#Project

Instructions:
1. Develop a Python website to predict the target and deploy it using Streamlit using GitHub repository.
2. You are require to use `Advertising.csv` dataset in this case study. Generate the model of this dataset outside of the streamlit environment (You can use Google Colab). You just need to load the model in this app (no model training should happens in this application).
3. You are require to choose only **ONE** of the most suitable supervised machine learning algorithm to solve this problem.
4. Feature scaling is optional for this project.
5. You need to enable slider to set the feature values.


**Submission**

Submit the following information:
* source code to generate the model (.pdf)
* screenshot of the source code (.py) on GitHub
* screenshot of the streamlit app
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np


pd.options.display.max_columns = None
pd.options.display.max_rows = None

df = pd.read_csv('Advertising (2).csv')

df.shape

df.columns

df.head()

df.tail()

df.info()

df.isnull().sum()

df = df.drop(['Unnamed: 0'],axis=1)
df.head()

df.info()

dfcorr = df.corr()
dfcorr

plt.figure(figsize=(15,3))
sns.heatmap(dfcorr, annot=True)

df.describe()

df = pd.read_csv('Advertising (2).csv')
df.head()

df = df.drop('Unnamed: 0', axis=1)
df.head()

df.describe()

from sklearn.model_selection import train_test_split

X=df.drop('Sales', axis=1)
y=df.Sales.copy()

from sklearn.linear_model import LinearRegression
modellr = LinearRegression()
modellr.fit(X_train, y_train)
y_pred = modellr.predict(X_test)

y_pred

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# The mean absolute error
print("Mean absolute error: {} ".format(mean_absolute_error(y_test, y_pred)))

# The mean squared error
print("Mean squared error: {} ".format(mean_squared_error(y_test, y_pred)))

# Root mean squared error
print("Root mean squared error: {} ".format(mean_squared_error(y_test, y_pred)**0.5)) #kite x de so use this

# Explained variance score: 1 is perfect prediction
print('Variance score: {} '.format(r2_score(y_test,y_pred)))

df_prediction = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df_prediction

tempActual = pd.DataFrame()
tempActual['Actual'] = df_prediction['Actual'].copy()

tempPrediction = pd.DataFrame()
tempPrediction['Predicted'] = df_prediction['Predicted'].copy()

df_prediction['Actual'] = scalerSales.inverse_transform(tempActual)
df_prediction['Predicted'] = scalerSales.inverse_transform(tempPrediction)
df_prediction

tempActual = pd.DataFrame()
tempActual['Actual'] = df_prediction['Actual'].copy()

tempPrediction = pd.DataFrame()
tempPrediction['Predicted'] = df_prediction['Predicted'].copy()

df_prediction['Actual'] = scalerSales.inverse_transform(tempActual)
df_prediction['Predicted'] = scalerSales.inverse_transform(tempPrediction)
df_prediction

import matplotlib.pyplot as plt

df_prediction.plot(kind="bar", figsize=(30,10))

plt.title('Sales Prediction - Linear Regression')
plt.xlabel('Index')
plt.ylabel('Sales')

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# The mean absolute error
print("Mean absolute error: {} ".format(mean_absolute_error(df_prediction['Actual'], df_prediction['Predicted'])))

# The mean squared error
print("Mean squared error: {} ".format(mean_squared_error(df_prediction['Actual'], df_prediction['Predicted'])))

# Root mean squared error
print("Root mean squared error: {} ".format(mean_squared_error(df_prediction['Actual'], df_prediction['Predicted'])**0.5))

# Explained variance score: 1 is perfect prediction
print('Variance score: {} '.format(r2_score(df_prediction['Actual'], df_prediction['Predicted'])))